import telebot
import random
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import time

# Kh·ªüi t·∫°o bot v·ªõi token m·ªõi
bot = telebot.TeleBot("7755493544:AAHhJld78NotMTwGdySlOuVmJRq2UEVnGFE")
ADMIN_ID = 5319454673  # Gi·ªØ nguy√™n ID admin c·ªßa b·∫°n

# Th√¥ng tin ng√¢n h√†ng
BANK_INFO = """
üí≥ **Th√¥ng tin n·∫°p ti·ªÅn**:
- Ng√¢n h√†ng: BIDV - Ng√¢n h√†ng Th∆∞∆°ng m·∫°i c·ªï ph·∫ßn ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam
- S·ªë t√†i kho·∫£n: 8843677213
- Ch·ªß t√†i kho·∫£n: LY KHAC TRUONG
- N·ªôi dung chuy·ªÉn kho·∫£n: NAP {user_id}
Vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng n·ªôi dung ƒë·ªÉ h·ªá th·ªëng t·ª± ƒë·ªông c·ªông ti·ªÅn!
"""

# K·∫øt n·ªëi database
conn = sqlite3.connect('taixiu.db', check_same_thread=False)
c = conn.cursor()

# T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
c.execute('''CREATE TABLE IF NOT EXISTS users (
             user_id INTEGER PRIMARY KEY, 
             balance REAL DEFAULT 0,
             username TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS bet_history (
             id INTEGER PRIMARY KEY AUTOINCREMENT,
             user_id INTEGER, 
             bet TEXT, 
             result TEXT, 
             amount REAL, 
             timestamp TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS transactions (
             id INTEGER PRIMARY KEY AUTOINCREMENT,
             user_id INTEGER, 
             type TEXT, 
             amount REAL, 
             status TEXT DEFAULT 'pending',
             timestamp TEXT)''')
conn.commit()

# Menu ch√≠nh (n√∫t inline)
def main_menu():
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üé≤ Ch∆°i t√†i x·ªâu", callback_data="play"),
               InlineKeyboardButton("üí∞ N·∫°p ti·ªÅn", callback_data="deposit"))
    markup.row(InlineKeyboardButton("üèß R√∫t ti·ªÅn", callback_data="withdraw"),
               InlineKeyboardButton("üìä Ki·ªÉm tra t√†i kho·∫£n", callback_data="balance"))
    markup.row(InlineKeyboardButton("üìú L·ªãch s·ª≠ c∆∞·ª£c", callback_data="bet_history"),
               InlineKeyboardButton("üßæ L·ªãch s·ª≠ giao d·ªãch", callback_data="transaction_history"))
    markup.row(InlineKeyboardButton("üìû H·ªó tr·ª£", callback_data="support"))
    return markup

# L·ªánh /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username or "Kh√¥ng c√≥ username"
    c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    welcome_msg = "Ch√†o M·ª´ng B·∫°n ƒê·∫øn T√†i X·ªâu 789 tr√™n Telegram By XiaoKanGG\nCh·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi ho·∫∑c d√πng l·ªánh trong menu!"
    bot.reply_to(message, welcome_msg, reply_markup=main_menu())

# X·ª≠ l√Ω n√∫t b·∫•m inline
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    if call.data == "play":
        bot.send_message(call.message.chat.id, "Ch·ªçn: T√†i ho·∫∑c X·ªâu\nV√≠ d·ª•: /tai 10000 ho·∫∑c /xiu 10000")
    elif call.data == "deposit":
        bot.send_message(call.message.chat.id, BANK_INFO.format(user_id=user_id))
    elif call.data == "withdraw":
        bot.send_message(call.message.chat.id, "G·ª≠i s·ªë ti·ªÅn mu·ªën r√∫t\nV√≠ d·ª•: /rut 50000")
    elif call.data == "balance":
        c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
        balance = c.fetchone()
        balance = balance[0] if balance else 0
        bot.send_message(call.message.chat.id, f"S·ªë d∆∞ c·ªßa b·∫°n: {balance:,} VNƒê")
    elif call.data == "bet_history":
        c.execute("SELECT bet, result, amount, timestamp FROM bet_history WHERE user_id=? ORDER BY timestamp DESC LIMIT 5", (user_id,))
        history = c.fetchall()
        if history:
            response = "üìú **L·ªãch s·ª≠ c∆∞·ª£c (5 l·∫ßn g·∫ßn nh·∫•t)**:\n"
            for bet, result, amount, timestamp in history:
                response += f"- {timestamp}: ƒê·∫∑t {bet}, K·∫øt qu·∫£: {result}, {amount:,} VNƒê\n"
        else:
            response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c n√†o!"
        bot.send_message(call.message.chat.id, response)
    elif call.data == "transaction_history":
        c.execute("SELECT type, amount, status, timestamp FROM transactions WHERE user_id=? ORDER BY timestamp DESC LIMIT 5", (user_id,))
        history = c.fetchall()
        if history:
            response = "üßæ **L·ªãch s·ª≠ giao d·ªãch (5 l·∫ßn g·∫ßn nh·∫•t)**:\n"
            for type, amount, status, timestamp in history:
                response += f"- {timestamp}: {type}, {amount:,} VNƒê, Tr·∫°ng th√°i: {status}\n"
        else:
            response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o!"
        bot.send_message(call.message.chat.id, response)
    elif call.data == "support":
        bot.send_message(call.message.chat.id, "üìû G·ª≠i y√™u c·∫ßu h·ªó tr·ª£ qua l·ªánh: /support [n·ªôi dung]")

# Ch∆°i t√†i x·ªâu v·ªõi ho·∫°t ·∫£nh x√∫c x·∫Øc
@bot.message_handler(commands=['tai', 'xiu'])
def play_game(message):
    user_id = message.from_user.id
    bet = message.text.split()[0][1:]  # L·∫•y "tai" ho·∫∑c "xiu"
    try:
        amount = float(message.text.split()[1])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
        balance = c.fetchone()
        if balance is None or balance[0] < amount:
            bot.reply_to(message, "S·ªë d∆∞ kh√¥ng ƒë·ªß!")
            return
        
        # G·ª≠i t·ª´ng ho·∫°t ·∫£nh x√∫c x·∫Øc
        bot.reply_to(message, "ƒêang tung x√∫c x·∫Øc...")
        dice_results = []
        for i in range(3):
            dice_msg = bot.send_dice(message.chat.id)
            dice_value = dice_msg.dice.value
            dice_results.append(dice_value)
            time.sleep(2)  # Ch·ªù ho·∫°t ·∫£nh
        
        # T√≠nh t·ªïng v√† k·∫øt qu·∫£
        total = sum(dice_results)
        result = "T√†i" if total >= 11 else "X·ªâu"

        # X·ª≠ l√Ω th·∫Øng thua
        if (bet == "tai" and total >= 11) or (bet == "xiu" and total < 11):
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
            bot.send_message(message.chat.id, f"T·ªïng: {total} - {result}\nB·∫°n th·∫Øng {amount:,} VNƒê!")
            winnings = amount
        else:
            c.execute("UPDATE users SET balance = balance - ? WHERE user_id=?", (amount, user_id))
            bot.send_message(message.chat.id, f"T·ªïng: {total} - {result}\nB·∫°n thua {amount:,} VNƒê!")
            winnings = -amount
        
        # L∆∞u l·ªãch s·ª≠ c∆∞·ª£c
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO bet_history (user_id, bet, result, amount, timestamp) VALUES (?, ?, ?, ?, ?)",
                  (user_id, bet.capitalize(), result, winnings, timestamp))
        conn.commit()

    except IndexError:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /tai [s·ªë ti·ªÅn] ho·∫∑c /xiu [s·ªë ti·ªÅn]")
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá!")
    except Exception as e:
        bot.reply_to(message, f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")

# N·∫°p ti·ªÅn
@bot.message_handler(commands=['nap'])
def deposit(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.split()[1])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0!")
            return
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO transactions (user_id, type, amount, timestamp) VALUES (?, ?, ?, ?)",
                  (user_id, "N·∫°p", amount, timestamp))
        conn.commit()
        bot.reply_to(message, f"Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin. Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin:\n{BANK_INFO.format(user_id=user_id)}")
        bot.send_message(ADMIN_ID, f"Ng∆∞·ªùi d√πng {user_id} (@{message.from_user.username}) y√™u c·∫ßu n·∫°p {amount:,} VNƒê\nTh·ªùi gian: {timestamp}")
    except:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /nap [s·ªë ti·ªÅn]")

# R√∫t ti·ªÅn
@bot.message_handler(commands=['rut'])
def withdraw(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.split()[1])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0!")
            return
        c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
        balance = c.fetchone()
        if balance is None or balance[0] < amount:
            bot.reply_to(message, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t!")
            return
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO transactions (user_id, type, amount, timestamp) VALUES (?, ?, ?, ?)",
                  (user_id, "R√∫t", amount, timestamp))
        conn.commit()
        bot.reply_to(message, "Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin. Vui l√≤ng ch·ªù x√°c nh·∫≠n!")
        bot.send_message(ADMIN_ID, f"Ng∆∞·ªùi d√πng {user_id} (@{message.from_user.username}) y√™u c·∫ßu r√∫t {amount:,} VNƒê\nTh·ªùi gian: {timestamp}")
    except:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /rut [s·ªë ti·ªÅn]")

# Xem s·ªë d∆∞
@bot.message_handler(commands=['balance'])
def check_balance(message):
    user_id = message.from_user.id
    c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    balance = c.fetchone()
    balance = balance[0] if balance else 0
    bot.reply_to(message, f"S·ªë d∆∞ c·ªßa b·∫°n: {balance:,} VNƒê")

# Xem l·ªãch s·ª≠ giao d·ªãch
@bot.message_handler(commands=['transaction_history'])
def transaction_history(message):
    user_id = message.from_user.id
    c.execute("SELECT type, amount, status, timestamp FROM transactions WHERE user_id=? ORDER BY timestamp DESC LIMIT 5", (user_id,))
    history = c.fetchall()
    if history:
        response = "üßæ **L·ªãch s·ª≠ giao d·ªãch (5 l·∫ßn g·∫ßn nh·∫•t)**:\n"
        for type, amount, status, timestamp in history:
            response += f"- {timestamp}: {type}, {amount:,} VNƒê, Tr·∫°ng th√°i: {status}\n"
    else:
        response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o!"
    bot.reply_to(message, response)

# Xem l·ªãch s·ª≠ c∆∞·ª£c
@bot.message_handler(commands=['bet_history'])
def bet_history(message):
    user_id = message.from_user.id
    c.execute("SELECT bet, result, amount, timestamp FROM bet_history WHERE user_id=? ORDER BY timestamp DESC LIMIT 5", (user_id,))
    history = c.fetchall()
    if history:
        response = "üìú **L·ªãch s·ª≠ c∆∞·ª£c (5 l·∫ßn g·∫ßn nh·∫•t)**:\n"
        for bet, result, amount, timestamp in history:
            response += f"- {timestamp}: ƒê·∫∑t {bet}, K·∫øt qu·∫£: {result}, {amount:,} VNƒê\n"
    else:
        response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c n√†o!"
    bot.reply_to(message, response)

# Li√™n h·ªá admin h·ªó tr·ª£
@bot.message_handler(commands=['support'])
def support(message):
    user_id = message.from_user.id
    try:
        content = " ".join(message.text.split()[1:])
        if not content:
            bot.reply_to(message, "Vui l√≤ng nh·∫≠p n·ªôi dung h·ªó tr·ª£!\nV√≠ d·ª•: /support T√¥i c·∫ßn gi√∫p ƒë·ª° v·ªÅ n·∫°p ti·ªÅn")
            return
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        bot.reply_to(message, "Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin. Vui l√≤ng ch·ªù ph·∫£n h·ªìi!")
        bot.send_message(ADMIN_ID, f"üìû Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ {user_id} (@{message.from_user.username}):\nN·ªôi dung: {content}\nTh·ªùi gian: {timestamp}")
    except:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /support [n·ªôi dung]")

# L·ªánh c·ªông ti·ªÅn cho t√†i kho·∫£n (ch·ªâ admin)
@bot.message_handler(commands=['addmoney'])
def add_money(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "Sai c√∫ ph√°p! S·ª≠ d·ª•ng: /addmoney [user_id] [s·ªë ti·ªÅn]")
            return
        target_user_id = int(args[1])
        amount = float(args[2])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
            return
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, target_user_id))
        c.execute("UPDATE transactions SET status = 'completed' WHERE user_id=? AND type='N·∫°p' AND amount=? AND status='pending'", 
                  (target_user_id, amount))
        conn.commit()
        bot.reply_to(message, f"ƒê√£ c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n {target_user_id}!")
        bot.send_message(target_user_id, f"B·∫°n ƒë√£ ƒë∆∞·ª£c c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n!")
    except ValueError:
        bot.reply_to(message, "User_id v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá! S·ª≠ d·ª•ng: /addmoney [user_id] [s·ªë ti·ªÅn]")
    except Exception as e:
        bot.reply_to(message, f"L·ªói: {str(e)}. S·ª≠ d·ª•ng: /addmoney [user_id] [s·ªë ti·ªÅn]")

# Ch·∫°y bot
if __name__ == "__main__":
    print("Bot ƒëang ch·∫°y...")
    bot.polling(none_stop=True)
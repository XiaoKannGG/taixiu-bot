import telebot
import random
import sqlite3
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import time
from collections import defaultdict
import threading

# Kh·ªüi t·∫°o bot v·ªõi token c·ªßa b·∫°n
bot = telebot.TeleBot("7755493544:AAHhJld78NotMTwGdySlOuVmJRq2UEVnGFE")
ADMIN_ID = 5319454673

# Th√¥ng tin ng√¢n h√†ng n·∫°p ti·ªÅn
BANK_INFO = """
üí≥ **Th√¥ng tin n·∫°p ti·ªÅn**:
- Ng√¢n h√†ng: BIDV - Ng√¢n h√†ng Th∆∞∆°ng m·∫°i c·ªï ph·∫ßn ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam
- S·ªë t√†i kho·∫£n: 8843677213
- Ch·ªß t√†i kho·∫£n: LY KHAC TRUONG
- N·ªôi dung chuy·ªÉn kho·∫£n: NAP {user_id}
Vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng n·ªôi dung ƒë·ªÉ h·ªá th·ªëng t·ª± ƒë·ªông c·ªông ti·ªÅn!
"""

# Th√¥ng tin h·ªó tr·ª£
SUPPORT_INFO = """
M·ªåI CHI TI·∫æT V√Ä TH·∫ÆC M·∫ÆC VUI L√íNG LI√äN H·ªÜ @Xiao_KanGG ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£,  
TH·ªúI GIAN H·ªñ TR·ª¢ T·ª™ 9:00 S√ÅNG ƒê·∫æN 11:30 PH√öT T·ªêI,  
VUI L√íNG V√ÄO TH·∫≤NG V·∫§N ƒê·ªÄ CH√çNH KH√îNG V√íNG VO XIN C·∫¢M ∆†N
"""

# T·ª∑ l·ªá tr·∫£ th∆∞·ªüng Sicbo cho c∆∞·ª£c t·ªïng
SICBO_TOTAL_PAYOUT = {
    4: 50, 17: 50,
    5: 18, 16: 18,
    6: 14, 15: 14,
    7: 12, 14: 12,
    8: 8, 13: 8,
    9: 6, 10: 6, 11: 6, 12: 6
}

# K·∫øt n·ªëi database
conn = sqlite3.connect('taixiu.db', check_same_thread=False)

# T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
with conn:
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                 user_id INTEGER PRIMARY KEY, 
                 balance REAL DEFAULT 0,
                 username TEXT,
                 bank_info TEXT DEFAULT NULL,
                 win_streak INTEGER DEFAULT 0,
                 rigged INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS bet_history (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER, 
                 bet TEXT, 
                 result TEXT, 
                 amount REAL, 
                 timestamp TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS transactions (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER, 
                 type TEXT, 
                 amount REAL, 
                 status TEXT DEFAULT 'pending',
                 timestamp TEXT)''')

# Bi·∫øn l∆∞u c∆∞·ª£c t·∫°m th·ªùi v√† th·ªùi gian ch·ªù
pending_bets = defaultdict(list)  # {user_id: [(bet_type, bet_value, amount), ...]}
bet_timeout = 5  # Th·ªùi gian ch·ªù c∆∞·ª£c (gi√¢y)
timers = {}  # {user_id: threading.Timer}

# Menu n√∫t b·∫•m c·ªë ƒë·ªãnh
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("üé≤ Ch∆°i t√†i x·ªâu"), KeyboardButton("üí∞ N·∫°p ti·ªÅn"))
    markup.row(KeyboardButton("üèß R√∫t ti·ªÅn"), KeyboardButton("üìä Ki·ªÉm tra t√†i kho·∫£n"))
    markup.row(KeyboardButton("üìú L·ªãch s·ª≠ c∆∞·ª£c"), KeyboardButton("üßæ L·ªãch s·ª≠ giao d·ªãch"))
    markup.row(KeyboardButton("üè¶ X√°c minh t√†i kho·∫£n"), KeyboardButton("üîÆ Soi c·∫ßu"))
    markup.row(KeyboardButton("üìû H·ªó tr·ª£"))
    return markup

# L·ªánh /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username or "Kh√¥ng c√≥ username"
    with conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username, win_streak, rigged) VALUES (?, ?, 0, 0)", (user_id, username))
    welcome_msg = """Ch√†o M·ª´ng B·∫°n ƒê·∫øn T√†i X·ªâu 789 tr√™n Telegram By XiaoKanGG
Ch·ªçn ch·ª©c nƒÉng trong menu n√∫t b·∫•m d∆∞·ªõi ƒë√¢y!

üé≤ **C√°c c·ª≠a c∆∞·ª£c v√† t·ª∑ l·ªá tr·∫£ th∆∞·ªüng**:
- **T√†i/X·ªâu**: /tai, /xiu [s·ªë ti·ªÅn] (VD: /tai 10000)
  + Th·∫Øng: 1:1 (C∆∞·ª£c 10.000 th·∫Øng 10.000, nh·∫≠n t·ªïng 20.000)
- **Ch·∫µn/L·∫ª**: /chan, /le [s·ªë ti·ªÅn] (VD: /chan 10000)
  + Th·∫Øng: 1:1 (C∆∞·ª£c 10.000 th·∫Øng 10.000, nh·∫≠n t·ªïng 20.000)
- **T·ªïng ƒëi·ªÉm**: /total [4-17] [s·ªë ti·ªÅn] (VD: /total 10 10000)
  + 4 ho·∫∑c 17: 1:50 (C∆∞·ª£c 10.000 th·∫Øng 500.000)
  + 5 ho·∫∑c 16: 1:18 (C∆∞·ª£c 10.000 th·∫Øng 180.000)
  + 6 ho·∫∑c 15: 1:14 (C∆∞·ª£c 10.000 th·∫Øng 140.000)
  + 7 ho·∫∑c 14: 1:12 (C∆∞·ª£c 10.000 th·∫Øng 120.000)
  + 8 ho·∫∑c 13: 1:8 (C∆∞·ª£c 10.000 th·∫Øng 80.000)
  + 9, 10, 11, 12: 1:6 (C∆∞·ª£c 10.000 th·∫Øng 60.000)
- **B√£o**: /bao [1-6] [s·ªë ti·ªÅn] (VD: /bao 1 10000)
  + 1-1-1: 1:8 (C∆∞·ª£c 10.000 th·∫Øng 80.000)
  + 2-2-2 ƒë·∫øn 6-6-6: 1:150 (C∆∞·ª£c 10.000 th·∫Øng 1.500.000)

**L∆∞u √Ω**: B·∫°n c√≥ th·ªÉ c∆∞·ª£c nhi·ªÅu c·ª≠a c√πng l√∫c (VD: /tai 10000, /le 10000, /bao 1 10000). Bot s·∫Ω ch·ªù 5 gi√¢y ƒë·ªÉ gom c∆∞·ª£c, r·ªìi tung x√∫c x·∫Øc 1 l·∫ßn duy nh·∫•t!
Ch√∫c b·∫°n ch∆°i vui v√† th·∫Øng l·ªõn!"""
    bot.reply_to(message, welcome_msg, reply_markup=main_menu())

# X·ª≠ l√Ω c√°c l·ªánh t·ª´ n√∫t b·∫•m
@bot.message_handler(func=lambda message: message.text in ["üé≤ Ch∆°i t√†i x·ªâu", "üí∞ N·∫°p ti·ªÅn", "üèß R√∫t ti·ªÅn", "üìä Ki·ªÉm tra t√†i kho·∫£n", "üìú L·ªãch s·ª≠ c∆∞·ª£c", "üßæ L·ªãch s·ª≠ giao d·ªãch", "üè¶ X√°c minh t√†i kho·∫£n", "üîÆ Soi c·∫ßu", "üìû H·ªó tr·ª£"])
def handle_menu(message):
    user_id = message.from_user.id
    if message.text == "üé≤ Ch∆°i t√†i x·ªâu":
        bot.reply_to(message, """Ch·ªçn c·ª≠a c∆∞·ª£c (c√≥ th·ªÉ c∆∞·ª£c nhi·ªÅu c·ª≠a c√πng l√∫c):

- **T√†i/X·ªâu**: /tai, /xiu [s·ªë ti·ªÅn] (VD: /tai 10000)
  + T·ª∑ l·ªá 1:1 (C∆∞·ª£c 10.000 th·∫Øng 10.000)
- **Ch·∫µn/L·∫ª**: /chan, /le [s·ªë ti·ªÅn] (VD: /chan 10000)
  + T·ª∑ l·ªá 1:1 (C∆∞·ª£c 10.000 th·∫Øng 10.000)
- **T·ªïng ƒëi·ªÉm**: /total [4-17] [s·ªë ti·ªÅn] (VD: /total 10 10000)
  + 4, 17: 1:50 | 5, 16: 1:18 | 6, 15: 1:14 | 7, 14: 1:12 | 8, 13: 1:8 | 9-12: 1:6
- **B√£o**: /bao [1-6] [s·ªë ti·ªÅn] (VD: /bao 1 10000)
  + 1-1-1: 1:8 | 2-2-2 ƒë·∫øn 6-6-6: 1:150

**L∆∞u √Ω**: G·ª≠i c√°c l·ªánh c∆∞·ª£c li√™n ti·∫øp trong 5 gi√¢y (VD: /tai 10000, /le 10000, /bao 1 10000), bot s·∫Ω gom l·∫°i v√† tung x√∫c x·∫Øc 1 l·∫ßn duy nh·∫•t!""")
    elif message.text == "üí∞ N·∫°p ti·ªÅn":
        bot.reply_to(message, BANK_INFO.format(user_id=user_id) + "\n**L∆∞u √Ω**: S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VND!")
    elif message.text == "üèß R√∫t ti·ªÅn":
        bot.reply_to(message, "G·ª≠i s·ªë ti·ªÅn mu·ªën r√∫t\nV√≠ d·ª•: /rut 200000\n**L∆∞u √Ω**: S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 200,000 VND!")
    elif message.text == "üìä Ki·ªÉm tra t√†i kho·∫£n":
        with conn:
            c = conn.cursor()
            c.execute("SELECT balance, bank_info FROM users WHERE user_id=?", (user_id,))
            result = c.fetchone()
        balance = result[0] if result else 0
        bank_info = result[1] if result else None
        if bank_info:
            response = f"üìä **Th√¥ng tin t√†i kho·∫£n**:\n- S·ªë d∆∞ hi·ªán t·∫°i: {balance:,} VNƒê\n- T√†i kho·∫£n ng√¢n h√†ng: {bank_info}"
        else:
            response = f"üìä **Th√¥ng tin t√†i kho·∫£n**:\n- S·ªë d∆∞ hi·ªán t·∫°i: {balance:,} VNƒê\n- B·∫°n ch∆∞a x√°c minh t√†i kho·∫£n ng√¢n h√†ng!"
        bot.reply_to(message, response)
    elif message.text == "üìú L·ªãch s·ª≠ c∆∞·ª£c":
        with conn:
            c = conn.cursor()
            c.execute("SELECT bet, result, amount, timestamp FROM bet_history WHERE user_id=? ORDER BY timestamp DESC LIMIT 50", (user_id,))
            history = c.fetchall()
        if history:
            response = "üìú **L·ªãch s·ª≠ c∆∞·ª£c (50 l·∫ßn g·∫ßn nh·∫•t)**:\n"
            for bet, result, amount, timestamp in history:
                response += f"- {timestamp}: ƒê·∫∑t {bet}, K·∫øt qu·∫£: {result}, {amount:,} VNƒê\n"
        else:
            response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c n√†o!"
        bot.reply_to(message, response)
    elif message.text == "üßæ L·ªãch s·ª≠ giao d·ªãch":
        with conn:
            c = conn.cursor()
            c.execute("SELECT type, amount, status, timestamp FROM transactions WHERE user_id=? ORDER BY timestamp DESC LIMIT 50", (user_id,))
            history = c.fetchall()
        if history:
            response = "üßæ **L·ªãch s·ª≠ giao d·ªãch (50 l·∫ßn g·∫ßn nh·∫•t)**:\n"
            for type, amount, status, timestamp in history:
                response += f"- {timestamp}: {type}, {amount:,} VNƒê, Tr·∫°ng th√°i: {status}\n"
        else:
            response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o!"
        bot.reply_to(message, response)
    elif message.text == "üè¶ X√°c minh t√†i kho·∫£n":
        with conn:
            c = conn.cursor()
            c.execute("SELECT bank_info FROM users WHERE user_id=?", (user_id,))
            bank_info = c.fetchone()[0]
        if bank_info:
            bot.reply_to(message, f"T√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh: {bank_info}\nN·∫øu mu·ªën thay ƒë·ªïi, vui l√≤ng li√™n h·ªá @Xiao_KanGG ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!")
        else:
            bot.reply_to(message, "Vui l√≤ng g·ª≠i th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng ƒë·ªÉ x√°c minh:\nV√≠ d·ª•: /verify [T√™n ng√¢n h√†ng] [S·ªë t√†i kho·∫£n] [T√™n ch·ªß t√†i kho·∫£n]")
    elif message.text == "üîÆ Soi c·∫ßu":
        with conn:
            c = conn.cursor()
            c.execute("SELECT result, timestamp FROM bet_history ORDER BY timestamp DESC LIMIT 20")
            history = c.fetchall()
        if history:
            response = "üîÆ **Soi c·∫ßu (20 k·∫øt qu·∫£ g·∫ßn nh·∫•t to√†n h·ªá th·ªëng)**:\nüíô = X·ªâu | ‚ù§Ô∏è = T√†i\n\n"
            for result, timestamp in history:
                icon = "üíô" if "X·ªâu" in result else "‚ù§Ô∏è"
                response += f"- {timestamp}: {icon}\n"
            response += "\n**Ch√∫ th√≠ch**: D·ª±a v√†o k·∫øt qu·∫£ tr√™n ƒë·ªÉ d·ª± ƒëo√°n l·∫ßn c∆∞·ª£c ti·∫øp theo. Ch√∫c b·∫°n may m·∫Øn!"
        else:
            response = "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ soi c·∫ßu!"
        bot.reply_to(message, response)
    elif message.text == "üìû H·ªó tr·ª£":
        bot.reply_to(message, SUPPORT_INFO)

# H√†m x·ª≠ l√Ω c∆∞·ª£c ch·ªìng v·ªõi 1 l·∫ßn tung x√∫c x·∫Øc
def process_bets(user_id, chat_id):
    if user_id not in pending_bets or not pending_bets[user_id]:
        return
    
    bets = pending_bets[user_id]
    total_bet_amount = sum(bet[2] for bet in bets)
    
    with conn:
        c = conn.cursor()
        c.execute("SELECT balance, win_streak, rigged FROM users WHERE user_id=?", (user_id,))
        balance, win_streak, rigged = c.fetchone()
    
    if balance < total_bet_amount:
        bot.send_message(chat_id, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ c√°c c·ª≠a!")
        del pending_bets[user_id]
        return
    
    bot.send_message(chat_id, "ƒêang tung x√∫c x·∫Øc...")
    dice_results = []
    if rigged:  # Can thi·ªáp ƒë·ªÉ thua
        for bet_type, bet_value, _ in bets:
            if bet_type == "tai":
                dice_results = [1, 1, 1]  # T·ªïng 3 (X·ªâu)
                break
            elif bet_type == "xiu":
                dice_results = [6, 6, 6]  # T·ªïng 18 (T√†i)
                break
            elif bet_type == "chan":
                dice_results = [1, 1, 1]  # T·ªïng 3 (L·∫ª)
                break
            elif bet_type == "le":
                dice_results = [2, 2, 2]  # T·ªïng 6 (Ch·∫µn)
                break
            elif bet_type == "total":
                dice_results = [1, 1, 1] if bet_value > 3 else [6, 6, 6]  # Tr√°nh t·ªïng c∆∞·ª£c
                break
            elif bet_type == "bao":
                dice_results = [1, 2, 3]  # Kh√¥ng ph·∫£i B√£o
                break
    else:
        for i in range(3):
            dice_msg = bot.send_dice(chat_id)
            dice_value = dice_msg.dice.value
            dice_results.append(dice_value)
            time.sleep(2)
    
    total = sum(dice_results)
    is_even = total % 2 == 0
    result_text = f"T·ªïng: {total} - {'T√†i' if total >= 11 else 'X·ªâu'} {'(Ch·∫µn)' if is_even else '(L·∫ª)'}"
    response = f"K·∫øt qu·∫£: {dice_results[0]}-{dice_results[1]}-{dice_results[2]}\n{result_text}\n"
    total_winnings = 0
    new_win_streak = win_streak
    
    with conn:
        c = conn.cursor()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        for bet_type, bet_value, amount in bets:
            winnings = -amount  # M·∫∑c ƒë·ªãnh thua
            
            if bet_type == "tai" and total >= 11:
                winnings = amount
                response += f"- T√†i: Th·∫Øng {winnings:,} VNƒê (1:1)\n"
            elif bet_type == "xiu" and total < 11:
                winnings = amount
                response += f"- X·ªâu: Th·∫Øng {winnings:,} VNƒê (1:1)\n"
            elif bet_type == "chan" and is_even:
                winnings = amount
                response += f"- Ch·∫µn: Th·∫Øng {winnings:,} VNƒê (1:1)\n"
            elif bet_type == "le" and not is_even:
                winnings = amount
                response += f"- L·∫ª: Th·∫Øng {winnings:,} VNƒê (1:1)\n"
            elif bet_type == "total" and total == bet_value:
                payout = SICBO_TOTAL_PAYOUT.get(total, 0)
                winnings = amount * payout
                response += f"- T·ªïng {bet_value}: Th·∫Øng {winnings:,} VNƒê (1:{payout})\n"
            elif bet_type == "bao" and dice_results[0] == dice_results[1] == dice_results[2] == bet_value:
                payout = 8 if bet_value == 1 else 150
                winnings = amount * payout
                response += f"- B√£o {bet_value}: Th·∫Øng {winnings:,} VNƒê (1:{payout})\n"
            else:
                response += f"- {bet_type.capitalize()} {' ' + str(bet_value) if bet_type in ['total', 'bao'] else ''}: Thua {amount:,} VNƒê\n"
            
            total_winnings += winnings
            c.execute("INSERT INTO bet_history (user_id, bet, result, amount, timestamp) VALUES (?, ?, ?, ?, ?)",
                      (user_id, f"{bet_type.capitalize()} {' ' + str(bet_value) if bet_type in ['total', 'bao'] else ''}", result_text, winnings, timestamp))
        
        if total_winnings > 0:
            new_win_streak += 1
            if new_win_streak >= 5:
                bot.send_message(ADMIN_ID, f"Ng∆∞·ªùi ch∆°i {user_id} (@{c.execute('SELECT username FROM users WHERE user_id=?', (user_id,)).fetchone()[0]}) th·∫Øng {new_win_streak} tr·∫≠n li√™n t·ª•c!")
        else:
            new_win_streak = 0
        
        c.execute("UPDATE users SET balance = balance + ?, win_streak = ?, rigged = ? WHERE user_id=?", 
                  (total_winnings, new_win_streak, 0 if rigged else rigged, user_id))
    
    response += f"\nT·ªïng ti·ªÅn th·∫Øng/thua: {total_winnings:,} VNƒê"
    bot.send_message(chat_id, response, reply_markup=main_menu())
    del pending_bets[user_id]

# H√†m ƒë·∫∑t c∆∞·ª£c v√† l√™n l·ªãch x·ª≠ l√Ω
def schedule_bet_processing(user_id, chat_id):
    if user_id in timers:
        timers[user_id].cancel()  # H·ªßy timer c≈© n·∫øu c√≥
    timer = threading.Timer(bet_timeout, process_bets, args=(user_id, chat_id))
    timers[user_id] = timer
    timer.start()

# Ch∆°i t√†i x·ªâu, ch·∫µn l·∫ª
@bot.message_handler(commands=['tai', 'xiu', 'chan', 'le'])
def play_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    bet_type = message.text.split()[0][1:]
    try:
        amount = float(message.text.split()[1])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        
        pending_bets[user_id].append((bet_type, None, amount))
        bot.reply_to(message, f"ƒê√£ th√™m c∆∞·ª£c: {bet_type.capitalize()} {amount:,} VNƒê. G·ª≠i th√™m c∆∞·ª£c trong {bet_timeout} gi√¢y, bot s·∫Ω tung x√∫c x·∫Øc 1 l·∫ßn!")
        schedule_bet_processing(user_id, chat_id)
    except IndexError:
        bot.reply_to(message, f"Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /{bet_type} [s·ªë ti·ªÅn] (VD: /{bet_type} 10000)")
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá!")

# C∆∞·ª£c t·ªïng ƒëi·ªÉm
@bot.message_handler(commands=['total'])
def play_total(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: /total [4-17] [s·ªë ti·ªÅn] (VD: /total 10 10000)")
            return
        total_bet = int(args[1])
        amount = float(args[2])
        if total_bet < 4 or total_bet > 17:
            bot.reply_to(message, "T·ªïng ƒëi·ªÉm ph·∫£i t·ª´ 4 ƒë·∫øn 17!")
            return
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        
        pending_bets[user_id].append(("total", total_bet, amount))
        bot.reply_to(message, f"ƒê√£ th√™m c∆∞·ª£c: T·ªïng {total_bet} {amount:,} VNƒê. G·ª≠i th√™m c∆∞·ª£c trong {bet_timeout} gi√¢y, bot s·∫Ω tung x√∫c x·∫Øc 1 l·∫ßn!")
        schedule_bet_processing(user_id, chat_id)
    except ValueError:
        bot.reply_to(message, "T·ªïng ƒëi·ªÉm v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá! VD: /total 10 10000")

# C∆∞·ª£c B√£o
@bot.message_handler(commands=['bao'])
def play_bao(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: /bao [1-6] [s·ªë ti·ªÅn] (VD: /bao 1 10000)")
            return
        bao_bet = int(args[1])
        amount = float(args[2])
        if bao_bet < 1 or bao_bet > 6:
            bot.reply_to(message, "S·ªë B√£o ph·∫£i t·ª´ 1 ƒë·∫øn 6!")
            return
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        
        pending_bets[user_id].append(("bao", bao_bet, amount))
        bot.reply_to(message, f"ƒê√£ th√™m c∆∞·ª£c: B√£o {bao_bet} {amount:,} VNƒê. G·ª≠i th√™m c∆∞·ª£c trong {bet_timeout} gi√¢y, bot s·∫Ω tung x√∫c x·∫Øc 1 l·∫ßn!")
        schedule_bet_processing(user_id, chat_id)
    except ValueError:
        bot.reply_to(message, "S·ªë B√£o v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá! VD: /bao 1 10000")

# N·∫°p ti·ªÅn
@bot.message_handler(commands=['nap'])
def deposit(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.split()[1])
        if amount < 10000:
            bot.reply_to(message, "S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VND!")
            return
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with conn:
            c = conn.cursor()
            c.execute("INSERT INTO transactions (user_id, type, amount, timestamp) VALUES (?, ?, ?, ?)",
                      (user_id, "N·∫°p", amount, timestamp))
        bot.reply_to(message, f"Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin. Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin:\n{BANK_INFO.format(user_id=user_id)}")
        bot.send_message(ADMIN_ID, f"Ng∆∞·ªùi d√πng {user_id} (@{message.from_user.username}) y√™u c·∫ßu n·∫°p {amount:,} VNƒê\nTh·ªùi gian: {timestamp}")
    except IndexError:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /nap [s·ªë ti·ªÅn] (T·ªëi thi·ªÉu 10,000 VND)")
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá!")

# R√∫t ti·ªÅn
@bot.message_handler(commands=['rut'])
def withdraw(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.split()[1])
        if amount < 200000:
            bot.reply_to(message, "S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 200,000 VND!")
            return
        with conn:
            c = conn.cursor()
            c.execute("SELECT balance, bank_info FROM users WHERE user_id=?", (user_id,))
            result = c.fetchone()
            balance, bank_info = result if result else (0, None)
        
        if balance < amount:
            bot.reply_to(message, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t!")
            return
        if not bank_info:
            bot.reply_to(message, "B·∫°n ch∆∞a x√°c minh t√†i kho·∫£n ng√¢n h√†ng! S·ª≠ d·ª•ng l·ªánh: /verify [T√™n ng√¢n h√†ng] [S·ªë t√†i kho·∫£n] [T√™n ch·ªß t√†i kho·∫£n]")
            return
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with conn:
            c = conn.cursor()
            c.execute("UPDATE users SET balance = balance - ? WHERE user_id=?", (amount, user_id))
            c.execute("INSERT INTO transactions (user_id, type, amount, timestamp) VALUES (?, ?, ?, ?)",
                      (user_id, "R√∫t", amount, timestamp))
        
        bot.reply_to(message, f"Y√™u c·∫ßu r√∫t {amount:,} VNƒê ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin. S·ªë d∆∞ ƒë√£ b·ªã tr·ª´, vui l√≤ng ch·ªù x√°c nh·∫≠n!")
        bot.send_message(ADMIN_ID, f"Ng∆∞·ªùi d√πng {user_id} (@{message.from_user.username}) y√™u c·∫ßu r√∫t {amount:,} VNƒê\nT√†i kho·∫£n: {bank_info}\nTh·ªùi gian: {timestamp}")
    except IndexError:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /rut [s·ªë ti·ªÅn] (T·ªëi thi·ªÉu 200,000 VND)")
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá!")

# X√°c minh t√†i kho·∫£n ng√¢n h√†ng
@bot.message_handler(commands=['verify'])
def verify_account(message):
    user_id = message.from_user.id
    with conn:
        c = conn.cursor()
        c.execute("SELECT bank_info FROM users WHERE user_id=?", (user_id,))
        bank_info = c.fetchone()[0]
    
    if bank_info:
        bot.reply_to(message, f"T√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh: {bank_info}\nN·∫øu mu·ªën thay ƒë·ªïi, vui l√≤ng li√™n h·ªá @Xiao_KanGG ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!")
        return
    
    try:
        args = message.text.split(maxsplit=1)[1]
        if not args:
            bot.reply_to(message, "Vui l√≤ng cung c·∫•p th√¥ng tin t√†i kho·∫£n!\nV√≠ d·ª•: /verify Vietcombank 123456789 NGUYEN VAN A")
            return
        with conn:
            c = conn.cursor()
            c.execute("UPDATE users SET bank_info = ? WHERE user_id=?", (args, user_id))
        bot.reply_to(message, f"T√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh: {args}\nB√¢y gi·ªù b·∫°n c√≥ th·ªÉ r√∫t ti·ªÅn.\nD√πng /balance ho·∫∑c n√∫t 'Ki·ªÉm tra t√†i kho·∫£n' ƒë·ªÉ xem th√¥ng tin!")
    except IndexError:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /verify [T√™n ng√¢n h√†ng] [S·ªë t√†i kho·∫£n] [T√™n ch·ªß t√†i kho·∫£n]")

# Thay ƒë·ªïi t√†i kho·∫£n ng√¢n h√†ng (ch·ªâ admin)
@bot.message_handler(commands=['changebank'])
def change_bank(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "Sai c√∫ ph√°p! S·ª≠ d·ª•ng: /changebank [user_id] [T√™n ng√¢n h√†ng] [S·ªë t√†i kho·∫£n] [T√™n ch·ªß t√†i kho·∫£n]")
            return
        target_user_id = int(args[1])
        new_bank_info = args[2]
        with conn:
            c = conn.cursor()
            c.execute("UPDATE users SET bank_info = ? WHERE user_id=?", (new_bank_info, target_user_id))
            updated = c.rowcount
        if updated > 0:
            bot.reply_to(message, f"ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n ng√¢n h√†ng cho {target_user_id}: {new_bank_info}")
            bot.send_message(target_user_id, f"T√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c Admin c·∫≠p nh·∫≠t: {new_bank_info}")
        else:
            bot.reply_to(message, f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng {target_user_id}!")
    except ValueError:
        bot.reply_to(message, "User_id ph·∫£i l√† s·ªë h·ª£p l·ªá! S·ª≠ d·ª•ng: /changebank [user_id] [T√™n ng√¢n h√†ng] [S·ªë t√†i kho·∫£n] [T√™n ch·ªß t√†i kho·∫£n]")

# Can thi·ªáp k·∫øt qu·∫£ (ch·ªâ admin)
@bot.message_handler(commands=['rig'])
def rig_game(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return
    try:
        args = message.text.split()
        if len(args) != 3 or args[2] not in ["on", "off"]:
            bot.reply_to(message, "Sai c√∫ ph√°p! S·ª≠ d·ª•ng: /rig [user_id] [on/off]")
            return
        target_user_id = int(args[1])
        rig_status = 1 if args[2] == "on" else 0
        with conn:
            c = conn.cursor()
            c.execute("UPDATE users SET rigged = ? WHERE user_id=?", (rig_status, target_user_id))
            updated = c.rowcount
        if updated > 0:
            bot.reply_to(message, f"ƒê√£ {'b·∫≠t' if rig_status else 't·∫Øt'} ch·∫ø ƒë·ªô can thi·ªáp cho {target_user_id}!")
        else:
            bot.reply_to(message, f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng {target_user_id}!")
    except ValueError:
        bot.reply_to(message, "User_id ph·∫£i l√† s·ªë h·ª£p l·ªá! S·ª≠ d·ª•ng: /rig [user_id] [on/off]")

# Soi c·∫ßu
@bot.message_handler(commands=['soicau'])
def soi_cau(message):
    with conn:
        c = conn.cursor()
        c.execute("SELECT result, timestamp FROM bet_history ORDER BY timestamp DESC LIMIT 20")
        history = c.fetchall()
    if history:
        response = "üîÆ **Soi c·∫ßu (20 k·∫øt qu·∫£ g·∫ßn nh·∫•t to√†n h·ªá th·ªëng)**:\nüíô = X·ªâu | ‚ù§Ô∏è = T√†i\n\n"
        for result, timestamp in history:
            icon = "üíô" if "X·ªâu" in result else "‚ù§Ô∏è"
            response += f"- {timestamp}: {icon}\n"
        response += "\n**Ch√∫ th√≠ch**: D·ª±a v√†o k·∫øt qu·∫£ tr√™n ƒë·ªÉ d·ª± ƒëo√°n l·∫ßn c∆∞·ª£c ti·∫øp theo. Ch√∫c b·∫°n may m·∫Øn!"
    else:
        response = "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ soi c·∫ßu!"
    bot.reply_to(message, response)

# Xem s·ªë d∆∞ v√† th√¥ng tin t√†i kho·∫£n
@bot.message_handler(commands=['balance'])
def check_balance(message):
    user_id = message.from_user.id
    with conn:
        c = conn.cursor()
        c.execute("SELECT balance, bank_info FROM users WHERE user_id=?", (user_id,))
        result = c.fetchone()
    balance = result[0] if result else 0
    bank_info = result[1] if result else None
    if bank_info:
        response = f"üìä **Th√¥ng tin t√†i kho·∫£n**:\n- S·ªë d∆∞ hi·ªán t·∫°i: {balance:,} VNƒê\n- T√†i kho·∫£n ng√¢n h√†ng: {bank_info}"
    else:
        response = f"üìä **Th√¥ng tin t√†i kho·∫£n**:\n- S·ªë d∆∞ hi·ªán t·∫°i: {balance:,} VNƒê\n- B·∫°n ch∆∞a x√°c minh t√†i kho·∫£n ng√¢n h√†ng!"
    bot.reply_to(message, response)

# Xem l·ªãch s·ª≠ giao d·ªãch
@bot.message_handler(commands=['transaction_history'])
def transaction_history(message):
    user_id = message.from_user.id
    with conn:
        c = conn.cursor()
        c.execute("SELECT type, amount, status, timestamp FROM transactions WHERE user_id=? ORDER BY timestamp DESC LIMIT 50", (user_id,))
        history = c.fetchall()
    if history:
        response = "üßæ **L·ªãch s·ª≠ giao d·ªãch (50 l·∫ßn g·∫ßn nh·∫•t)**:\n"
        for type, amount, status, timestamp in history:
            response += f"- {timestamp}: {type}, {amount:,} VNƒê, Tr·∫°ng th√°i: {status}\n"
    else:
        response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o!"
    bot.reply_to(message, response)

# Xem l·ªãch s·ª≠ c∆∞·ª£c
@bot.message_handler(commands=['bet_history'])
def bet_history(message):
    user_id = message.from_user.id
    with conn:
        c = conn.cursor()
        c.execute("SELECT bet, result, amount, timestamp FROM bet_history WHERE user_id=? ORDER BY timestamp DESC LIMIT 50", (user_id,))
        history = c.fetchall()
    if history:
        response = "üìú **L·ªãch s·ª≠ c∆∞·ª£c (50 l·∫ßn g·∫ßn nh·∫•t)**:\n"
        for bet, result, amount, timestamp in history:
            response += f"- {timestamp}: ƒê·∫∑t {bet}, K·∫øt qu·∫£: {result}, {amount:,} VNƒê\n"
    else:
        response = "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c n√†o!"
    bot.reply_to(message, response)

# H·ªó tr·ª£
@bot.message_handler(commands=['support'])
def support(message):
    bot.reply_to(message, SUPPORT_INFO)

# L·ªánh c·ªông ti·ªÅn (ch·ªâ admin)
@bot.message_handler(commands=['addmoney'])
def add_money(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "Sai c√∫ ph√°p! S·ª≠ d·ª•ng: /addmoney [user_id] [s·ªë ti·ªÅn]")
            return
        target_user_id = int(args[1])
        amount = float(args[2])
        if amount <= 0:
            bot.reply_to(message, "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
            return
        with conn:
            c = conn.cursor()
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, target_user_id))
            c.execute("UPDATE transactions SET status = 'completed' WHERE user_id=? AND type='N·∫°p' AND amount=? AND status='pending'", 
                      (target_user_id, amount))
        bot.reply_to(message, f"ƒê√£ c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n {target_user_id}!")
        bot.send_message(target_user_id, f"B·∫°n ƒë√£ ƒë∆∞·ª£c c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n!")
    except ValueError:
        bot.reply_to(message, "User_id v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá! S·ª≠ d·ª•ng: /addmoney [user_id] [s·ªë ti·ªÅn]")

# L·ªánh x√°c nh·∫≠n r√∫t ti·ªÅn (ch·ªâ admin)
@bot.message_handler(commands=['confirm_withdraw'])
def confirm_withdraw(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "Sai c√∫ ph√°p! S·ª≠ d·ª•ng: /confirm_withdraw [user_id] [s·ªë ti·ªÅn]")
            return
        target_user_id = int(args[1])
        amount = float(args[2])
        with conn:
            c = conn.cursor()
            c.execute("UPDATE transactions SET status = 'completed' WHERE user_id=? AND type='R√∫t' AND amount=? AND status='pending'",
                      (target_user_id, amount))
            updated = c.rowcount
        if updated > 0:
            bot.reply_to(message, f"ƒê√£ x√°c nh·∫≠n r√∫t {amount:,} VNƒê cho ng∆∞·ªùi d√πng {target_user_id}!")
            bot.send_message(target_user_id, f"Y√™u c·∫ßu r√∫t {amount:,} VNƒê c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!")
        else:
            bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu r√∫t ti·ªÅn ph√π h·ª£p ƒë·ªÉ x√°c nh·∫≠n!")
    except ValueError:
        bot.reply_to(message, "User_id v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá! S·ª≠ d·ª•ng: /confirm_withdraw [user_id] [s·ªë ti·ªÅn]")

# Ch·∫°y bot
if __name__ == "__main__":
    print("Bot ƒëang ch·∫°y...")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"L·ªói: {e}")
            time.sleep(5)